name: Test, Build, and Deploy

on:
  push:
    branches:
      - development  # Se activa cuando hay un push a la rama 'development'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .env file
        run: |
          # Crear el archivo .env
          echo "DEV_DB_HOST=my_mysql" > .env
          echo "DEV_DB_PORT=3308" >> .env
          echo "DEV_DB_USER=root" >> .env
          echo "DEV_DB_PASSWORD=12345" >> .env
          echo "TEST_DB_HOST=localhost" >> .env
          echo "TEST_DB_PORT=3309" >> .env
          echo "TEST_DB_USER=root" >> .env
          echo "TEST_DB_PASSWORD=12345" >> .env
          echo "PROD_DB_PASSWORD=aeutGJMA2C" >> .env
          echo "PROD_DB_USER=sql10751906" >> .env
          echo "PROD_DB_PORT=3306" >> .env
          echo "PROD_DB_HOST=sql10.freemysqlhosting.net" >> .env
          echo "APP_PORT=8090" >> .env
          echo "TEST_DB_NAME=db" >> .env
          echo "PROD_DB_NAME=sql10751906" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Verify .env file creation
        run: |
          ls -la
          cat .env

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install

      - name: Run tests
        env:
          NODE_ENV: test
        run: |
          npm test

  merge:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Fetch latest branches
        run: |
          git fetch origin main

      - name: Merge development into main
        run: |
          git checkout main
          git merge origin/development --allow-unrelated-histories --no-ff -X theirs -m "Merge development into main"
          if git ls-files -u | grep -q .; then
            echo "Merge conflict detected in the following files:"
            git ls-files -u
            exit 1
          fi

      - name: Push changes
        run: |
          git push origin main
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          docker compose version

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker compose -f "docker-compose.v1.yml" up -d --build
          docker compose push

      - name: Trigger Render Deploy
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}", "clearCache": false}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

version: "3.8"

services:
  app:
    build: .
    container_name: my_node_app
    ports:
      - "8090:8090"
    env_file:
      - .env
    volumes:
      - ./:/myapp
      - node_modules_cache:/myapp/node_modules
    networks:
      - mynetwork

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - mynetwork

  nodeexporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    ports:
      - "9100:9100"
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  node_modules_cache: {}
