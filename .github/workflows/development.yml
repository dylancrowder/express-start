name: Test, Build, and Deploy

on:
  push:
    branches:
      - development  # Se activa cuando hay un push a la rama 'development'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print current directory
        run: echo "Current directory: $(pwd)"

      - name: List files in the workspace
        run: ls -la

      - name: Set up Docker Compose
        run: |
          # Crear el archivo .env
          echo "DEV_DB_HOST=my_mysql" >> .env
          echo "DEV_DB_PORT=3308" >> .env
          echo "DEV_DB_USER=root" >> .env
          echo "DEV_DB_PASSWORD=12345" >> .env
          echo "TEST_DB_HOST=localhost" >> .env
          echo "TEST_DB_PORT=3309" >> .env
          echo "TEST_DB_USER=root" >> .env
          echo "TEST_DB_PASSWORD=12345" >> .env
          echo "PROD_DB_PASSWORD=aeutGJMA2C" >> .env
          echo "PROD_DB_USER=sql10751906" >> .env
          echo "PROD_DB_PORT=3306" >> .env
          echo "PROD_DB_HOST=sql10.freemysqlhosting.net" >> .env
          echo "APP_PORT= 8090" >> .env
          echo "TEST_DB_NAME=db" >> .env
          echo "PROD_DB_NAME=sql10751906" >> .env

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install

      - name: Run tests
        env:
          NODE_ENV: test
        run: |
          npm test

  merge:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print current directory (merge job)
        run: echo "Current directory: $(pwd)"

      - name: List files in the workspace (merge job)
        run: ls -la

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Fetch latest branches
        run: |
          git fetch origin main

      - name: Merge development into main
        run: |
          git checkout main
          git merge origin/development --allow-unrelated-histories --no-ff -X theirs -m "Merge development into main"
          if git ls-files -u | grep -q .; then
            echo "Merge conflict detected in the following files:"
            git ls-files -u
            exit 1
          fi

      - name: Push changes
        run: |
          git push origin main
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Paso 6: Instalar Docker Compose (v1)
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verificar la versión de Docker Compose

      # Paso 7: Construir la imagen de Docker
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker-compose -f "docker-compose.v1.yml" up -d --build  # Usando docker-compose con guion
          docker-compose push

      # Paso 8: Desplegar a Render
      - name: Trigger Render Deploy
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}", "clearCache": false}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

      # Paso 9: Verificar si el archivo docker-compose.yml está presente
      - name: Check for docker-compose.yml
        run: |
          if [ -f docker-compose.yml ]; then
            echo "docker-compose.yml exists"
          else
            echo "docker-compose.yml not found"
            exit 1
          fi
